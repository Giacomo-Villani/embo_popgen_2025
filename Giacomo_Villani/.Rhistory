library(readr)
library(readxl)
library(tibble)
library(ggplot2)
library(ggrepel)
library(forcats)
library(grid)
library(corrplot)
library(tidyverse)
library(readr)
library(readxl)
library(tibble)
library(ggplot2)
library(ggrepel)
library(forcats)
library(grid)
library(corrplot)
library(tidyverse)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# // some info \\ #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
## files required: your evec, your eval, an excel with for each population the necessary specifics (Group, Region, Shape, Color, Fill) and your poplist
evec_file <- "ModernsHO_WE-ITA_onlyREN_similIP_g002_m002_g06_o5.pca.evec.txt"
eval_file <- "ModernsHO_WE-ITA_onlyREN_similIP_g002_m002_g06_o5.pca.eval.txt"
popspecifics_excel <- "poplist_PCA.xlsx"
poplist_file <- "ModernsHO_WE-ITA_onlyREN_similIP_g002_m002_g06.poplist.txt"
Cartella_lavoro <- "D:/giacomo_v/Progetto_Ledro_Rendena/1_NuclearGenome/2_PCA/2_PCA-WE/10_ModernHO_WE-ITA/" ## set your own working directory!
Cartella_output <- "1_outputPCA_WE_ITA-REN"
## latest update: 2025/01/21
## inspired from https://github.com/jfy133/Tidy_PopGen_PCA_Plotting/blob/master/Tidy_PopGen_PCA_Plotting.md
## work by GV, NRM, GS, IP, VN, AT, EM
## to update by looking at https://statisticsglobe.com/3d-plot-pca-r
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# // some functions for plotting \\ #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# we add layer by layer: WE, WE Pops, Italy, Rendeneri, ancient Ledro and as last, its labels
# Gigi function, version 2, but the first has been outclassed
Gigi_fx_v1 <- function(firstPC_num, secondPC_num) {
# Calculating % of explained variance
somma <- sum(eval_PCA)
firstPC_val <- round(((eval_PCA[firstPC_num] / somma) * 100), digits = 2)
secondPC_val <- round(((eval_PCA[secondPC_num] / somma) * 100), digits = 2)
# Extracting column names
firstPC_col <- paste0("PC", firstPC_num)
secondPC_col <- paste0("PC", secondPC_num)
# Calculating means for the chosen PCs per Pop in West Eurasia
WE_mean_PC <- WestEu %>%
group_by(Pop) %>%
summarise(
!!firstPC_col := mean(.data[[firstPC_col]]),
!!secondPC_col := mean(.data[[secondPC_col]]),
.groups = "drop"
)
# Building the graph
ggplot() +
scale_colour_manual(values = list_colour) +
scale_shape_manual(values = list_shape) +
scale_fill_manual(values = list_fill) +
geom_point(data = WestEu, aes(x = !!sym(firstPC_col), y = !!sym(secondPC_col), colour = Region, shape = Group, fill = Region), alpha = 0.2) +
geom_text_repel(data = WE_mean_PC, aes(x = !!sym(firstPC_col), y = !!sym(secondPC_col), label = Pop), color = "black", size = 2, max.overlaps = 16) +
geom_point(data = Italiani, aes(x = !!sym(firstPC_col), y = !!sym(secondPC_col), colour = Region, shape = Group, fill = Region), alpha = 0.4) +
geom_point(data = Rendeneri, aes(x = !!sym(firstPC_col), y = !!sym(secondPC_col), colour = Region, shape = Group, fill = Region), alpha = 0.7) +
labs(
title = paste0("West Eurasian, Human Origin, PCs: ",firstPC_num, " and ",secondPC_num),
x = paste0(firstPC_col, " (", firstPC_val, "%)"),
y = paste0(secondPC_col, " (", secondPC_val, "%)")
) +
theme_classic() +
guides(fill = guide_legend(override.aes = list(shape = 21, size = 4)), shape = guide_legend(override.aes = list(size = 4)))
}
# Gigi function, version 3, minor change on version 2, adding labels in legend
Gigi_fx_v2 <- function(firstPC_num, secondPC_num) {
# Calculating % of explained variance
somma <- sum(eval_PCA)
firstPC_val <- round(((eval_PCA[firstPC_num] / somma) * 100), digits = 2)
secondPC_val <- round(((eval_PCA[secondPC_num] / somma) * 100), digits = 2)
# Extracting column names
firstPC_col <- paste0("PC", firstPC_num)
secondPC_col <- paste0("PC", secondPC_num)
# Calculating means for the chosen PCs per Pop in West Eurasia
WE_mean_PC <- WestEu %>%
group_by(Pop) %>%
summarise(
!!firstPC_col := mean(.data[[firstPC_col]]),
!!secondPC_col := mean(.data[[secondPC_col]]),
.groups = "drop"
)
# Building the graph
ggplot() +
scale_colour_manual(values = list_colour, labels = new_Region_labels) +
scale_fill_manual(values = list_fill, labels = new_Region_labels) +
scale_shape_manual(values = list_shape, labels = new_Group_labels) +
geom_point(data = WestEu, aes(x = !!sym(firstPC_col), y = !!sym(secondPC_col), colour = Region, shape = Group, fill = Region), alpha = 0.2) +
geom_text_repel(data = WE_mean_PC, aes(x = !!sym(firstPC_col), y = !!sym(secondPC_col), label = Pop), color = "black", size = 2, max.overlaps = 16) +
geom_point(data = Italiani, aes(x = !!sym(firstPC_col), y = !!sym(secondPC_col), colour = Region, shape = Group, fill = Region), alpha = 0.4) +
geom_point(data = Rendeneri, aes(x = !!sym(firstPC_col), y = !!sym(secondPC_col), colour = Region, shape = Group, fill = Region), alpha = 0.7) +
labs(
title = paste0("West Eurasian, Human Origin, PCs: ",firstPC_num, " and ",secondPC_num),
x = paste0(firstPC_col, " (", firstPC_val, "%)"),
y = paste0(secondPC_col, " (", secondPC_val, "%)")
) +
theme_classic() +
guides(fill = guide_legend(override.aes = list(shape = 21, size = 4)), shape = guide_legend(override.aes = list(size = 4)))
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
setwd(Cartella_lavoro)
Ne=100
sequenza <- c(rep(0, Ne))
next_gen_neutral <- function(Ne, F){
coin <- rep(0,Ne)
coin[1:Ne, rbinom(1, Ne, F)]
}
Ne=1000
pop= next_gen_neutral(Ne, 1/Ne)
next_gen_neutral <- function(Ne, F){
coin <- rep(0,Ne)
coin[1:Ne, rbinom(1, Ne, F)]
}
Ne=1000
F= 1/Ne
pop= next_gen_neutral(Ne, F)
??rbinom()
rbinom(1, 100, 0.5)
rbinom(5, 100, 0.5)
next_gen_neutral <- function(Ne, F){
coin <- rep(0,Ne)
coin[1:Ne, rbinom(1, 1, F)]
}
Ne=1000
F= 1/Ne
pop= next_gen_neutral(Ne, F)
rbinom(n=1, size=1, prob=0.5)
rbinom(n=10, size=1, prob=0.5)
rep(0,Ne)
coin[1:Ne] <- rbinom(1, Ne, F)
next_gen_neutral <- function(Ne, F){
coin <- rep(0,Ne)
coin[1:Ne] <- rbinom(1, Ne, F)]
next_gen_neutral <- function(Ne, F){
coin <- rep(0,Ne)
coin[1:Ne] <- rbinom(1, Ne, F)
}
Ne=1000
F= 1/Ne
pop= next_gen_neutral(Ne, F)
f <- mean(pop)
pop
next_gen_neutral <- function(Ne, F){
coin <- rep(0,Ne)
coin[1:Ne] <- rbinom(1, Ne, F)
return(coin)
}
Ne=1000
F= 1/Ne
pop= next_gen_neutral(Ne, F)
f <- mean(pop)
f
pop= next_gen_neutral(Ne, F)
pop
rbinom(1, Ne, F)
rbinom(1, Ne, F)
rbinom(1, Ne, F)
rbinom(1, Ne, F)
rbinom(1, Ne, F)
rbinom(1, Ne, F)
rbinom(1, Ne, F)
next_gen_neutral <- function(Ne, F){
coin <- rep(0,Ne)
for i in 1:Ne {
next_gen_neutral <- function(Ne, F){
coin <- rep(0,Ne)
for (i in 1:Ne) {
coin[i] <- rbinom(1, Ne, F)
}
return(coin)
}
Ne=1000
F= 1/Ne
pop= next_gen_neutral(Ne, F)
pop
next_gen_neutral <- function(Ne, F){
coin <- rep(0,Ne)
for (i in 1:Ne) {
coin[i] <- rbinom(1, 1, F)
}
return(coin)
}
Ne=1000
F= 1/Ne
pop= next_gen_neutral(Ne, F)
pop
f <- mean(pop)
gen <-1
record.f <- c(1/Ne)
f
f
next_gen_neutral <- function(Ne, F){
coin <- rep(0,Ne)
for (i in 1:Ne) {
coin[i] <- rbinom(1, 1, F)
}
return(coin)
}
recording_of_frequency <- function(Ne, F, Ngen){
record = rep(0,Ngen)
for (i in 1:Ne) {
pop= next_gen_neutral(Ne, F)
f <- mean(pop)
record[i] <- f
}
}
Ne=1000
F= 1/Ne
recording_of_frequency(Ne, F, 1000)
next_gen_neutral <- function(Ne, F){
coin <- rep(0,Ne)
for (i in 1:Ne) {
coin[i] <- rbinom(1, 1, F)
}
return(coin)
}
recording_of_frequency <- function(Ne, F, Ngen){
record = rep(0,Ngen)
for (i in 1:Ne) {
pop= next_gen_neutral(Ne, F)
f <- mean(pop)
record[i] <- f
}
return(record)
}
Ne=1000
F= 1/Ne
record <- recording_of_frequency(Ne, F, 1000)
library(ggplot2)
ggplot(record)
next_gen_neutral <- function(Ne, F){
coin <- rep(0,Ne)
for (i in 1:Ne) {
coin[i] <- rbinom(1, 1, F)
}
return(coin)
}
recording_of_frequency <- function(Ne, F, Ngen){
record = rep(0,Ngen)
for (i in 1:Ne) {
pop= next_gen_neutral(Ne, F)
f <- mean(pop)
record[i] <- f
}
return(record)
}
Ne=1000
F= 1/Ne
Ngen = 1000
record <- recording_of_frequency(Ne, F, Ngen)
record_to_plot <- data.table (gen = 1:Ngen, frequency= record)
library(tidyverse)
data.table
data.table()
library(data.table)
record_to_plot <- data.table(gen = 1:Ngen, frequency= record)
View(record_to_plot)
ggplot(record)
ggplot(record_to_plot)
plot(record_to_plot)
plot(record_to_plot, type="b")
install.packages("usethis")
library("usethis")
usethis::git_sitrep()
credentials::set_github_pat("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")
library(tidyverse)
setwd("D:/git/embo_popgen_2025/Giacomo_Villani")
read.table("Salamander.txt", col.names = T)
library(tidyverse)
setwd("D:/git/embo_popgen_2025/Giacomo_Villani")
read.table("Salamander.txt", col.names = T, row.names = F)
library(tidyverse)
setwd("D:/git/embo_popgen_2025/Giacomo_Villani")
read.table("Salamander.txt", col.names = T, row.names = F)
read.table("Salamander.txt", col.names = T, row.names = F)
read.table("Salamander.txt")
